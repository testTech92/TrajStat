"""Command line interface for the TrajStat Python port."""
from __future__ import annotations

from pathlib import Path
from typing import List

import typer

from .main import TrajStatPlugin
from .trajectory.util import DistanceType, get_time_zone

app = typer.Typer(help="Trajectory statistics utilities")


def _load_plugin(control: Path | None) -> TrajStatPlugin:
    plugin = TrajStatPlugin()
    if control is not None:
        plugin.load_control(control)
    return plugin


@app.command()
def calculate(control: Path = typer.Argument(..., help="Path to a CONTROL file")) -> None:
    """Execute the configured trajectory model."""

    plugin = _load_plugin(control)
    plugin.calculate_trajectories()
    typer.echo("Trajectory calculation finished")


@app.command()
def convert(
    traj_file: Path = typer.Argument(..., help="HYSPLIT trajectory output file"),
    tgs_file: Path = typer.Argument(..., help="Destination TGS file"),
) -> None:
    """Convert a single trajectory output file to the TGS format."""

    TrajStatPlugin.convert_single_traj(traj_file, tgs_file)
    typer.echo(f"Converted {traj_file} -> {tgs_file}")


@app.command("convert-batch")
def convert_batch(
    traj_files: List[Path] = typer.Argument(..., help="List of trajectory files"),
    tgs_file: Path = typer.Argument(..., help="Destination TGS file"),
) -> None:
    """Convert multiple trajectory files into a single TGS file."""

    TrajStatPlugin.convert_multiple_traj(traj_files, tgs_file)
    typer.echo(f"Converted {len(traj_files)} files -> {tgs_file}")


@app.command()
def join(
    tgs_files: List[Path] = typer.Argument(..., help="TGS files to merge"),
    output: Path = typer.Argument(..., help="Joined output file"),
) -> None:
    """Merge several TGS files into a single dataset."""

    TrajStatPlugin.merge_tgs_files(tgs_files, output)
    typer.echo(f"Merged {len(tgs_files)} files -> {output}")


@app.command()
def shape(
    tgs_file: Path = typer.Argument(..., help="Input TGS file"),
    output: Path = typer.Argument(..., help="GeoJSON output file"),
) -> None:
    """Convert a TGS file to a GeoJSON polyline collection."""

    plugin = TrajStatPlugin()
    layer = plugin.convert_to_shape(tgs_file, output)
    if layer is None:
        typer.echo("No valid trajectories found", err=True)
        raise typer.Exit(code=1)
    typer.echo(f"Saved {layer.get_shape_num()} polylines -> {output}")


@app.command("cluster-stats")
def cluster_stats(
    tgs_file: Path = typer.Argument(..., help="TGS file generated by the workflow"),
    cluster_assignments: List[int] = typer.Argument(..., help="Cluster id per trajectory"),
    point_count: int = typer.Option(..., help="Number of points per trajectory"),
    distance: DistanceType = typer.Option(DistanceType.EUCLIDEAN, help="Distance metric"),
) -> None:
    """Compute mean trajectories and TSV statistics for a TGS file."""

    plugin = TrajStatPlugin()
    layer = plugin.convert_to_shape(tgs_file, tgs_file.with_suffix(".geojson"))
    if layer is None:
        typer.echo("No trajectories available", err=True)
        raise typer.Exit(code=1)
    means, tsv = plugin.calculate_cluster_statistics(
        cluster_assignments, max(cluster_assignments), point_count, [layer], distance
    )
    typer.echo(f"TSV: {tsv:.3f}")
    typer.echo(f"Mean trajectories: {means}")


@app.command()
def timezone(name: str = typer.Argument(..., help="Time zone string, e.g. GMT+8")) -> None:
    """Display the numeric offset for a GMT style time zone string."""

    typer.echo(get_time_zone(name))


if __name__ == "__main__":  # pragma: no cover
    app()
